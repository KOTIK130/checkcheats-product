<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - CheckCheats</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .dashboard-container {
            max-width: 900px;
            margin: 0 auto;
        }
        
        .info-row {
            display: flex;
            align-items: center;
            padding: 1rem 1.5rem;
            background: var(--background-card);
            border-left: 3px solid var(--primary-color);
            margin-bottom: 0.75rem;
            border-radius: 8px;
        }
        
        .info-row-label {
            width: 180px;
            color: var(--text-secondary);
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .info-row-value {
            flex: 1;
            color: var(--text-primary);
            font-weight: 600;
            font-size: 1.125rem;
        }
        
        .icon-blue {
            color: var(--primary-color);
            width: 20px;
            height: 20px;
        }
        
        .download-section {
            margin-top: 2rem;
            padding: 2rem;
            background: linear-gradient(135deg, var(--background-card), rgba(0, 132, 255, 0.05));
            border-radius: 12px;
            border: 1px solid var(--border-color);
            text-align: center;
        }
        
        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <a href="/" class="nav-brand">CheckCheats</a>
            <ul class="nav-menu">
                <li><a href="/" class="nav-link">–ì–ª–∞–≤–Ω–∞—è</a></li>
                <li><a href="/products" class="nav-link">–ü—Ä–æ–¥—É–∫—Ç—ã</a></li>
                <li><a href="/dashboard" class="nav-link active">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a></li>
                <% if (user.group === 'Admin') { %>
                    <li><a href="/admin" class="nav-link">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</a></li>
                <% } %>
                <li><a href="#" onclick="logout()" class="nav-link">–í—ã–π—Ç–∏</a></li>
            </ul>
        </div>
    </nav>

    <div class="container">
        <div class="dashboard-container">
            <div class="dashboard-header">
                <h1 class="dashboard-title">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
                <p style="color: var(--text-secondary);">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π</p>
            </div>

            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</h2>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üÜî</span> UID
                    </div>
                    <div class="info-row-value"><%= user.uid %></div>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üë§</span> –õ–æ–≥–∏–Ω
                    </div>
                    <div class="info-row-value"><%= user.username %></div>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üë•</span> –ì—Ä—É–ø–ø–∞
                    </div>
                    <div class="info-row-value">
                        <span class="status-badge <%= user.group === 'Admin' ? 'status-active' : 'status-pending' %>">
                            <%= user.group === 'Admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : user.group === 'VIP' ? 'VIP' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' %>
                        </span>
                    </div>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üìÖ</span> –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    </div>
                    <div class="info-row-value">
                        <%= new Date(user.registrationDate).toLocaleDateString('ru-RU', { 
                            year: 'numeric', 
                            month: '2-digit', 
                            day: '2-digit',
                            hour: '2-digit',
                            minute: '2-digit'
                        }) %>
                    </div>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üìß</span> E-mail
                    </div>
                    <div class="info-row-value"><%= user.email %></div>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üñ•Ô∏è</span> HWID
                    </div>
                    <div class="info-row-value">
                        <%= user.hwid || '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω' %>
                        <% if (user.hwid) { %>
                            <button class="btn btn-small btn-secondary" style="margin-left: 1rem;" onclick="requestHwidReset()">
                                –°–±—Ä–æ—Å–∏—Ç—å
                            </button>
                        <% } %>
                    </div>
                </div>
                
                <div class="info-row">
                    <div class="info-row-label">
                        <span class="icon-blue">üé´</span> –ö–ª–∏–µ–Ω—Ç –∫—É–ø–ª–µ–Ω –¥–æ
                    </div>
                    <div class="info-row-value">
                        <% if (user.subscriptionExpires) { %>
                            <span class="status-badge <%= new Date(user.subscriptionExpires) > new Date() ? 'status-active' : 'status-expired' %>">
                                <%= new Date(user.subscriptionExpires).toLocaleDateString('ru-RU', { 
                                    year: 'numeric', 
                                    month: '2-digit', 
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                }) %>
                            </span>
                        <% } else { %>
                            <span class="status-badge status-expired">–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</span>
                        <% } %>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞</h2>
                </div>
                
                <div id="activation-message" class="alert" style="display: none;"></div>
                
                <form id="activate-form">
                    <div class="key-input-group">
                        <input type="text" class="key-input" id="activation-key" 
                               placeholder="XXXX-XXXX-XXXX-XXXX" 
                               maxlength="19"
                               pattern="[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}"
                               required>
                        <button type="submit" class="btn-primary">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                </form>
                
                <p style="color: var(--text-secondary); font-size: 0.875rem;">
                    –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                </p>
            </div>

            <% if (user.subscriptionExpires && new Date(user.subscriptionExpires) > new Date()) { %>
            <div class="download-section">
                <h3 style="margin-bottom: 1rem; color: var(--text-primary);">‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</h3>
                <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">
                    –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                </p>
                <button class="btn-primary" onclick="downloadClient()">
                    üì• –°–∫–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
                </button>
            </div>
            <% } %>

            <div class="action-buttons">
                <button class="btn btn-secondary" onclick="showProfile()">
                    üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                </button>
                <button class="btn btn-danger" onclick="logout()">
                    üö™ –í—ã–π—Ç–∏
                </button>
            </div>
        </div>
    </div>

    <script>
        // Auto format key input
        document.getElementById('activation-key').addEventListener('input', function(e) {
            let value = e.target.value.replace(/[^A-Z0-9]/gi, '').toUpperCase();
            let formatted = '';
            
            for (let i = 0; i < value.length && i < 16; i++) {
                if (i > 0 && i % 4 === 0) {
                    formatted += '-';
                }
                formatted += value[i];
            }
            
            e.target.value = formatted;
        });
        
        // Activate key
        document.getElementById('activate-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const messageDiv = document.getElementById('activation-message');
            messageDiv.style.display = 'none';
            
            const key = document.getElementById('activation-key').value;
            
            try {
                const response = await fetch('/api/key/activate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ key })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    messageDiv.className = 'alert alert-success';
                    messageDiv.textContent = data.message || '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
                    messageDiv.style.display = 'flex';
                    
                    // Reload page after 2 seconds
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    messageDiv.className = 'alert alert-error';
                    messageDiv.textContent = data.error || '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏';
                    messageDiv.style.display = 'flex';
                }
            } catch (error) {
                messageDiv.className = 'alert alert-error';
                messageDiv.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
                messageDiv.style.display = 'flex';
            }
        });
        
        // Download client
        async function downloadClient() {
            try {
                const response = await fetch('/api/download');
                const data = await response.json();
                
                if (data.success) {
                    window.location.href = data.downloadUrl;
                } else {
                    alert(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
                }
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
        }
        
        // Request HWID reset
        function requestHwidReset() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å HWID? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü.')) {
                alert('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–±—Ä–æ—Å–∞ HWID');
            }
        }
        
        // Show profile settings
        function showProfile() {
            window.location.href = '/change-password';
        }
        
        // Logout
        function logout() {
            fetch('/api/auth/logout', { method: 'POST' })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirect;
                    }
                });
        }
    </script>
</body>
</html>